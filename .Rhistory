# Convert the values in the 'Date' column from Excel integers to R dates
deaths2021$Date <- as.Date(as.numeric(deaths2021$Date), origin = "1899-12-30")
# Remove all three "Remove" columns
deaths2021 <- deaths2021 %>%
select(-c(Remove1, Remove2, Remove3, `Deaths by age group`))
# Convert all the remaining columns to be integers
deaths2021[] <- lapply(deaths2021, function(x) {
if (is.character(x)) {
as.integer(gsub("[^0-9]", "", x))  # Remove non-numeric characters and convert to integer
} else {
x
}
})
deaths2021 <- deaths2021 %>%
mutate(`Week number` = (row_number() - 1) %% 52 + 1) %>%
select(`Week number`, everything()) %>%
rename(`Week ending` = Date)
ons_deaths <- bind_rows(deaths2021, deaths2122) %>%
arrange(`Week ending`) %>%
distinct(`Week ending`, .keep_all = TRUE)
#Plot
# Reshape the data to long format
long_data <- ons_deaths %>%
select(-`Week number`, -`All ages`) %>%
gather(key = "Age group", value = "Deaths", -`Week ending`)
# Plot using ggplot2
ggplot(long_data, aes(x = `Week ending`, y = Deaths, color = `Age group`)) +
geom_line() +
labs(title = "Deaths by Week and Age Group",
y = "Number of Deaths",
x = "Week ending",
color = "Age Group") +
theme_minimal()
library(tidyverse)
library(lubridate)
library(zoo)
library(bsts)
library(readxl)
library(httr)
#### Get COVID incidence from ONS ####
url <- 'https://www.ons.gov.uk/file?uri=/peoplepopulationandcommunity/healthandsocialcare/conditionsanddiseases/datasets/coronaviruscovid19infectionsurveycumulativeincidenceofthepercentageofpeoplewhohavetestedpositiveforcovid19infectionsengland/current/cumulativeincidence.xlsx'
# Download the file into a temporary location
response <- GET(url, write_disk(temp <- tempfile(fileext = ".xlsx")))
# Read the specific sheet from the downloaded Excel file
incidence_raw <- read_excel(temp, sheet = 3, range = 'A6:Z662')
unlink(temp)
#Process incidence data
incidence <- incidence_raw %>% mutate(Date = date(Date))
#Rename and calculate the diff
names(incidence) = c('Date', 'Variant', 'All', 'All_lc', 'All_uc', '2-11', '2-11_lc', '2-11_uc', '12-16', '12-16_lc', '12-16_uc', '17-24', '17-24_lc', '17-24_uc', '25-34', '25-34_lc', '25-34_uc', '35-49', '35-49_lc', '35-49_uc', '50-69', '50-69_lc', '50-69_uc', '70+', '70+_lc', '70+_uc')
incidence <- incidence %>% mutate(across(-c('Date', 'Variant'), ~c(NA, diff(.))))
#Drop first 4 lines, and then
incidence <- incidence %>%
slice(5:n()) %>%
mutate(across(-c(Date, Variant), ~ifelse(. < -0.005, NA, .))) %>%
fill(everything(), .direction = "downup") %>%
slice(2:n())
#Plot incidence
# Pivot data to longer format
df_long <- incidence %>%
pivot_longer(-c(Date, Variant), names_to="Metric", values_to="Value")
# Create line chart
ggplot(df_long, aes(x=Date, y=Value, color=Variant, linetype=Metric)) +
geom_line(size=1) +
theme_minimal() +
labs(y="Value", title="Metric values over time") +
scale_linetype_discrete(guide=guide_legend(title="Metric"))
ons_incidence <- incidence
View(ons_deaths)
View(ons_incidence)
#Doing All
# Set your start_week date
start_week <- as.Date("2020-05-07")
ons_weekly_incidence <- ons_incidence %>%
filter(Date >= start_week) %>%  # Ensure dates are on or after the start_week
mutate(week_offset = as.numeric(difftime(Date, start_week, units = "days")) %/% 7) %>%
group_by(week_start = start_week + (week_offset * 7)) %>%
summarize(All = sum(All, na.rm = TRUE)) %>%
select(Date = week_start, All)
View(ons_weekly_incidence)
ons_deaths
tail(ons_deaths)
ons_incidence_weekly
ons_weekly_incidence
# Joining the tibbles based on the date columns and selecting only the relevant columns
result <- ons_weekly_incidence %>%
inner_join(ons_deaths, by = c("Date" = "Week ending")) %>%
select(Date, All, `All ages`)
result
ons_weekly_incidence
ons_deaths
start_week <- as.Date("2020-05-08")
ons_weekly_incidence <- ons_incidence %>%
filter(Date >= start_week) %>%  # Ensure dates are on or after the start_week
mutate(week_offset = as.numeric(difftime(Date, start_week, units = "days")) %/% 7) %>%
group_by(week_start = start_week + (week_offset * 7)) %>%
summarize(All = sum(All, na.rm = TRUE)) %>%
select(Date = week_start, All)
# Joining the tibbles based on the date columns and selecting only the relevant columns
result <- ons_weekly_incidence %>%
inner_join(ons_deaths, by = c("Date" = "Week ending")) %>%
select(Date, All, `All ages`)
result
England_population <- '56536400'
England_population <- 56536400
result <- result %>% mutate(`All` = All * England_population)
result
# Joining the tibbles based on the date columns and selecting only the relevant columns
result <- ons_weekly_incidence %>%
inner_join(ons_deaths, by = c("Date" = "Week ending")) %>%
select(Date, Incidence = All, Deaths = `All ages`)
England_population <- 56536400
result <- result %>% mutate(Incidence = Incidence * England_population)
result
k <- 0
model_frame <- result %>% mutate(Admissions = lead(Admissions, n = k))
k <- 0
model_frame <- result %>% mutate(Deaths = lead(Deaths, n = k))
model_frame <- drop_na(model_frame)
ss <- list()
k <- 0
model_frame <- result %>% mutate(Deaths = lead(Deaths, n = k))
model_frame <- drop_na(model_frame)
ss <- list()
ss <- AddDynamicRegression(ss, model_frame$Deaths ~ model_frame$Incidence)
model <- bsts(Deaths ~ Incidence, state.specification = ss, data = model_frame, niter = iter)
k <- 0
iter <- 500
model_frame <- result %>% mutate(Deaths = lead(Deaths, n = k))
model_frame <- drop_na(model_frame)
ss <- list()
ss <- AddDynamicRegression(ss, model_frame$Deaths ~ model_frame$Incidence)
model <- bsts(Deaths ~ Incidence, state.specification = ss, data = model_frame, niter = iter)
plot(model, "dynamic", burn = 100)
model_frame
k <- 0
iter <- 500
model_frame <- result %>% mutate(Deaths = lead(Deaths, n = 2))
model_frame <- drop_na(model_frame)
ss <- list()
ss <- AddDynamicRegression(ss, model_frame$Deaths ~ model_frame$Incidence)
model <- bsts(Deaths ~ Incidence, state.specification = ss, data = model_frame, niter = iter)
plot(model, "dynamic", burn = 100)
k <- 0
iter <- 500
model_frame <- result %>% mutate(Deaths = lag(Deaths, n = 2))
model_frame <- drop_na(model_frame)
ss <- list()
ss <- AddDynamicRegression(ss, model_frame$Deaths ~ model_frame$Incidence)
model <- bsts(Deaths ~ Incidence, state.specification = ss, data = model_frame, niter = iter)
plot(model, "dynamic", burn = 100)
k <- 0
iter <- 500
model_frame <- result %>% mutate(Deaths = lead(Deaths, n = 3))
model_frame <- drop_na(model_frame)
ss <- list()
ss <- AddDynamicRegression(ss, model_frame$Deaths ~ model_frame$Incidence)
model <- bsts(Deaths ~ Incidence, state.specification = ss, data = model_frame, niter = iter)
plot(model, "dynamic", burn = 100)
k <- 0
iter <- 1000
model_frame <- result %>% mutate(Deaths = lead(Deaths, n = 3))
model_frame <- drop_na(model_frame)
ss <- list()
ss <- AddDynamicRegression(ss, model_frame$Deaths ~ model_frame$Incidence)
model <- bsts(Deaths ~ Incidence, state.specification = ss, data = model_frame, niter = iter)
plot(model, "dynamic", burn = 200)
k <- 0
iter <- 1000
model_frame <- result %>% mutate(Deaths = lead(Deaths, n = 2))
model_frame <- drop_na(model_frame)
ss <- list()
ss <- AddDynamicRegression(ss, model_frame$Deaths ~ model_frame$Incidence)
model <- bsts(Deaths ~ Incidence, state.specification = ss, data = model_frame, niter = iter)
plot(model, "dynamic", burn = 200)
result
plot(result)
ggplot(data = result, aes(x = Date)) +
geom_line(aes(y = Incidence, color = "Incidence"), size = 1) +
geom_line(aes(y = Deaths, color = "Deaths"), size = 1) +
labs(y = "Counts", color = "Legend", title = "Incidence and Deaths over Time") +
theme_minimal()
ggplot(data = result, aes(x = Date)) +
geom_line(aes(y = Incidence), color = "blue", size = 1) +
geom_line(aes(y = Deaths / ratio), color = "red", size = 1) +
scale_y_continuous(name = "Incidence",
sec.axis = sec_axis(~ . * ratio, name = "Deaths")) +
labs(title = "Incidence and Deaths over Time") +
theme_minimal()
ggplot(data = result, aes(x = Date)) +
geom_line(aes(y = Incidence), color = "blue", size = 1) +
geom_line(aes(y = Deaths / ratio), color = "red", size = 1) +
scale_y_continuous(name = "Incidence", sec.axis = sec_axis(~ . * ratio, name = "Deaths")) +
labs(title = "Incidence and Deaths over Time") +
theme_minimal()
ratio <- max(result$Deaths) / max(result$Incidence)
ggplot(data = result, aes(x = Date)) +
geom_line(aes(y = Incidence), color = "blue", size = 1) +
geom_line(aes(y = Deaths / ratio), color = "red", size = 1) +
scale_y_continuous(name = "Incidence", sec.axis = sec_axis(~ . * ratio, name = "Deaths")) +
labs(title = "Incidence and Deaths over Time") +
theme_minimal()
View(result)
result <- ons_weekly_incidence %>%
inner_join(ons_deaths, by = c("Date" = "Week ending")) %>%
select(Date, Incidence_offset = All, Deaths = `All ages`)
England_population <- 56536400
result <- result %>% mutate(Incidence = Incidence * England_population)
result <- ons_weekly_incidence %>%
inner_join(ons_deaths, by = c("Date" = "Week ending")) %>%
select(Date, Incidence_offset = All, Deaths = `All ages`)
England_population <- 56536400
result <- result %>% mutate(Incidence = Incidence * England_population)
# Joining the tibbles based on the date columns and selecting only the relevant columns
result <- ons_weekly_incidence %>%
inner_join(ons_deaths, by = c("Date" = "Week ending")) %>%
select(Date, Incidence = All, Deaths = `All ages`)
England_population <- 56536400
result <- result %>% mutate(Incidence = Incidence * England_population)
result <- result %>% mutate(Deaths = lead(Deaths, n = 2))
ratio <- max(result$Deaths) / max(result$Incidence)
ggplot(data = result, aes(x = Date)) +
geom_line(aes(y = Incidence), color = "blue", size = 1) +
geom_line(aes(y = Deaths / ratio), color = "red", size = 1) +
scale_y_continuous(name = "Incidence", sec.axis = sec_axis(~ . * ratio, name = "Deaths")) +
labs(title = "Incidence and Deaths over Time") +
theme_minimal()
# Joining the tibbles based on the date columns and selecting only the relevant columns
result <- ons_weekly_incidence %>%
inner_join(ons_deaths, by = c("Date" = "Week ending")) %>%
select(Date, Incidence = All, Deaths = `All ages`)
England_population <- 56536400
result <- result %>% mutate(Incidence = Incidence * England_population)
result <- result %>% mutate(Deaths = lead(Deaths, n = 2))
result <- result %>% drop_na(result)
# Joining the tibbles based on the date columns and selecting only the relevant columns
result <- ons_weekly_incidence %>%
inner_join(ons_deaths, by = c("Date" = "Week ending")) %>%
select(Date, Incidence = All, Deaths = `All ages`)
England_population <- 56536400
result <- result %>% mutate(Incidence = Incidence * England_population)
result <- result %>% mutate(Deaths = lead(Deaths, n = 2))
result <- drop_na(result)
ratio <- max(result$Deaths) / max(result$Incidence)
ggplot(data = result, aes(x = Date)) +
geom_line(aes(y = Incidence), color = "blue", size = 1) +
geom_line(aes(y = Deaths / ratio), color = "red", size = 1) +
scale_y_continuous(name = "Incidence", sec.axis = sec_axis(~ . * ratio, name = "Deaths")) +
labs(title = "Incidence and Deaths over Time") +
theme_minimal()
England_population <- 56536400
result <- result %>% mutate(Incidence = Incidence * England_population)
result <- result %>% mutate(Deaths = lead(Deaths, n = 3))
result <- drop_na(result)
ratio <- max(result$Deaths) / max(result$Incidence)
ggplot(data = result, aes(x = Date)) +
geom_line(aes(y = Incidence), color = "blue", size = 1) +
geom_line(aes(y = Deaths / ratio), color = "red", size = 1) +
scale_y_continuous(name = "Incidence", sec.axis = sec_axis(~ . * ratio, name = "Deaths")) +
labs(title = "Incidence and Deaths over Time") +
theme_minimal()
start_week <- as.Date("2020-05-08")
ons_weekly_incidence <- ons_incidence %>%
filter(Date >= start_week) %>%  # Ensure dates are on or after the start_week
mutate(week_offset = as.numeric(difftime(Date, start_week, units = "days")) %/% 7) %>%
group_by(week_start = start_week + (week_offset * 7)) %>%
summarize(All = sum(All, na.rm = TRUE)) %>%
select(Date = week_start, All)
# Joining the tibbles based on the date columns and selecting only the relevant columns
result <- ons_weekly_incidence %>%
inner_join(ons_deaths, by = c("Date" = "Week ending")) %>%
select(Date, Incidence = All, Deaths = `All ages`)
England_population <- 56536400
result <- result %>% mutate(Incidence = Incidence * England_population)
ratio <- max(result$Deaths) / max(result$Incidence)
ggplot(data = result, aes(x = Date)) +
geom_line(aes(y = Incidence), color = "blue", size = 1) +
geom_line(aes(y = Deaths / ratio), color = "red", size = 1) +
scale_y_continuous(name = "Incidence", sec.axis = sec_axis(~ . * ratio, name = "Deaths")) +
labs(title = "Incidence and Deaths over Time") +
theme_minimal()
k <- 0
iter <- 1000
model_frame <- result %>% mutate(Deaths = lead(Deaths, n = 3))
model_frame <- drop_na(model_frame)
ss <- list()
ss <- AddDynamicRegression(ss, model_frame$Deaths ~ model_frame$Incidence)
model <- bsts(Deaths ~ Incidence, state.specification = ss, data = model_frame, niter = iter)
plot(model, "dynamic", burn = 200)
ons_weekly_incidence
dyn_coefs <- apply(model$dynamic.regression.coefficients, c(3), mean)
dyn_coefs
result$Date
model_frame$Date
model_frame$dyn_coefs <- apply(model$dynamic.regression.coefficients, c(3), mean)
ggplot(data = model_frame, aes(x = Date)) +
geom_line(aes(y = dyn_coefs), color = "red", size = 1) +
theme_minimal()
# Plot using ggplot2
ggplot(long_data, aes(x = `Week ending`, y = Deaths, color = `Age group`)) +
geom_line() +
labs(title = "Deaths by Week and Age Group",
y = "Number of Deaths",
x = "Week ending",
color = "Age Group") +
theme_minimal()
# Create line chart
ggplot(df_long, aes(x=Date, y=Value, color=Variant, linetype=Metric)) +
geom_line(size=1) +
theme_minimal() +
labs(y="Value", title="Metric values over time") +
scale_linetype_discrete(guide=guide_legend(title="Metric"))
ons_incidence
ons_deaths
col_name <- 'All'
ons_weekly_incidence <- ons_incidence %>%
filter(Date >= start_week) %>%
mutate(week_offset = as.numeric(difftime(Date, start_week, units = "days")) %/% 7) %>%
group_by(week_start = start_week + (week_offset * 7)) %>%
summarize(value = sum(!!sym(col_name), na.rm = TRUE)) %>%
select(Date = week_start, !!col_name := value)
library(tidyverse)
library(lubridate)
library(zoo)
library(bsts)
#Doing All
# Set your start_week date
start_week <- as.Date("2020-05-08")
col_name <- 'All'
ons_weekly_incidence <- ons_incidence %>%
filter(Date >= start_week) %>%
mutate(week_offset = as.numeric(difftime(Date, start_week, units = "days")) %/% 7) %>%
group_by(week_start = start_week + (week_offset * 7)) %>%
summarize(value = sum(!!sym(col_name), na.rm = TRUE)) %>%
select(Date = week_start, !!col_name := value)
ons_weekly_incidence
col_name <- '2-11'
ons_weekly_incidence <- ons_incidence %>%
filter(Date >= start_week) %>%
mutate(week_offset = as.numeric(difftime(Date, start_week, units = "days")) %/% 7) %>%
group_by(week_start = start_week + (week_offset * 7)) %>%
summarize(value = sum(!!sym(col_name), na.rm = TRUE)) %>%
select(Date = week_start, !!col_name := value)
ons_weekly_incidence
incidence_ONS
ONS_incidence
ons_incidence
names(ons_incidence)
names(ons_deaths)
incidence_death_lookups <- list('01-04' = c('2-11'),
'05-09' = c('2-11'),
'10-14' = c('2-11', '12-16'),
'15-19' = c('12-16', '17-24'),
'20-24' = c('17-24'),
'25-29' = c('25-34'),
'30-34' = c('25-34'),
'35-39' = c('35-49'),
'40-44' = c('35-49'),
'44-49' = c('35-49'),
'50-54' = c('50-69'),
'55-59' = c('50-69'),
'60-64' = c('50-69'),
'65-69' = c('50-69'),
'70-74' = c('70+'),
'75-79' = c('70+'),
'80-84' = c('70+'),
'75-89' = c('70+'),
'90+' = c('70+'))
incidence_death_lookups('80-84')
incidence_death_lookups['80-84']
incidence_name <- '2-11'
ons_weekly_incidence <- ons_incidence %>%
filter(Date >= start_week) %>%
mutate(week_offset = as.numeric(difftime(Date, start_week, units = "days")) %/% 7) %>%
group_by(week_start = start_week + (week_offset * 7)) %>%
summarize(value = sum(!!sym(incidence_name), na.rm = TRUE)) %>%
select(Date = week_start, !!incidence_name := value)
library(tidyverse)
library(lubridate)
library(zoo)
library(bsts)
#Doing All
# Set your start_week date
start_week <- as.Date("2020-05-08")
incidence_death_lookups <- list('01-04' = c('2-11'),
'05-09' = c('2-11'),
'10-14' = c('2-11', '12-16'),
'15-19' = c('12-16', '17-24'),
'20-24' = c('17-24'),
'25-29' = c('25-34'),
'30-34' = c('25-34'),
'35-39' = c('35-49'),
'40-44' = c('35-49'),
'44-49' = c('35-49'),
'50-54' = c('50-69'),
'55-59' = c('50-69'),
'60-64' = c('50-69'),
'65-69' = c('50-69'),
'70-74' = c('70+'),
'75-79' = c('70+'),
'80-84' = c('70+'),
'75-89' = c('70+'),
'90+' = c('70+'))
incidence_name <- '2-11'
ons_weekly_incidence <- ons_incidence %>%
filter(Date >= start_week) %>%
mutate(week_offset = as.numeric(difftime(Date, start_week, units = "days")) %/% 7) %>%
group_by(week_start = start_week + (week_offset * 7)) %>%
summarize(value = sum(!!sym(incidence_name), na.rm = TRUE)) %>%
select(Date = week_start, !!incidence_name := value)
ons_weekly_incidence
start_week <- as.Date("2020-05-08")
death_age <- '01-04'
incidence_death_lookups <- list('01-04' = c('2-11'),
'05-09' = c('2-11'),
'10-14' = c('2-11', '12-16'),
'15-19' = c('12-16', '17-24'),
'20-24' = c('17-24'),
'25-29' = c('25-34'),
'30-34' = c('25-34'),
'35-39' = c('35-49'),
'40-44' = c('35-49'),
'44-49' = c('35-49'),
'50-54' = c('50-69'),
'55-59' = c('50-69'),
'60-64' = c('50-69'),
'65-69' = c('50-69'),
'70-74' = c('70+'),
'75-79' = c('70+'),
'80-84' = c('70+'),
'75-89' = c('70+'),
'90+' = c('70+'))
ons_deaths
get_average <- function(death_age, ons_data, lookup_list) {
# Identify columns based on death_age
columns <- lookup_list[[death_age]]
# Subset ons_data
relevant_data <- ons_data[, columns, drop = FALSE]
# Calculate row-wise average
avg_values <- rowMeans(relevant_data)
return(avg_values)
}
# Function to calculate the average based on death_age
get_average <- function(death_age, ons_data, lookup_list) {
# Identify columns based on death_age
columns <- lookup_list[[death_age]]
# Subset ons_data
relevant_data <- ons_data[, columns, drop = FALSE]
# Calculate row-wise average
avg_values <- rowMeans(relevant_data)
return(avg_values)
}
averages <- get_average(death_age, ons_incidence, incidence_death_lookups)
averages
death_age <- '10-14'
incidence_death_lookups <- list('01-04' = c('2-11'),
'05-09' = c('2-11'),
'10-14' = c('2-11', '12-16'),
'15-19' = c('12-16', '17-24'),
'20-24' = c('17-24'),
'25-29' = c('25-34'),
'30-34' = c('25-34'),
'35-39' = c('35-49'),
'40-44' = c('35-49'),
'44-49' = c('35-49'),
'50-54' = c('50-69'),
'55-59' = c('50-69'),
'60-64' = c('50-69'),
'65-69' = c('50-69'),
'70-74' = c('70+'),
'75-79' = c('70+'),
'80-84' = c('70+'),
'75-89' = c('70+'),
'90+' = c('70+'),
'All ages' = c('All'))
# Function to calculate the average based on death_age
get_average <- function(death_age, ons_data, lookup_list) {
# Identify columns based on death_age
columns <- lookup_list[[death_age]]
# Subset ons_data
relevant_data <- ons_data[, columns, drop = FALSE]
# Calculate row-wise average
avg_values <- rowMeans(relevant_data)
return(avg_values)
}
averages <- get_average(death_age, ons_incidence, incidence_death_lookups)
print(averages)
number_of_infections <- population_lookups[[death_age]] * average_incidence
population_lookups <- list('05-09' = 3524600,
'10-14' = 3595900,
'15-19' = 3394700,
'20-24' = 3602100,
'25-29' = 3901800,
'30-34' = 4148800,
'35-39' = 3981600,
'40-44' = 3755700,
'44-49' = 3788700,
'50-54' = 4123400,
'55-59' = 4029000,
'60-64' = 3455700,
'65-69' = 2945100,
'70-74' = 2978000,
'75-79' = 2170300,
'80-84' = 1517000,
'85-89' = 925100,
'90+' = 527900,
'All ages' = 59597300)
number_of_infections <- population_lookups[[death_age]] * average_incidence
average_incidence <- get_average(death_age, ons_incidence, incidence_death_lookups)
number_of_infections <- population_lookups[[death_age]] * average_incidence
number_of_infections
plot(number_of_infections)
